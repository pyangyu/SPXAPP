import pandas as pd
import re

# Create a sample DataFrame
df = pd.DataFrame({
    'col1': ['AH123', 'XYZ', 'AH456', 'PQR', 'AH789'],
    'col2': [1, 2, 3, 4, 5]
})

# Count the number of rows containing "AH"
num_rows_containing_ah = df['col1'].str.contains('AH').sum()


pattern1 = r"\d{3}-\d{8}"
file_name = "dadsa dfs f 123- 98789098"

file_name = file_name.replace(" ", "")
matches = re.findall(pattern1, file_name)

a = ['20230511100526789190', '20230511094925388760', '20230511023542662760', '20230511101011950820', '20230511023109320920', '20230511042515747610', '20230511025525924400', '20230511043108521820', '20230511043711704590', '20230511044338883870', '20230510110351250460', '20230510110131168890', '20230510101729016550', '20230510093433871400', '20230510104811406660', '20230510100831723480', '20230510101005013490', '20230510105806545920', '20230510100633467240', '20230511043305154230', '20230510102722134380', '20230510082450208700', '20230510124444182840', '20230510105559153810', '20230510102432769220', '20230510144850715760', '20230510135418634180', '20230510110525807350', '20230510144724137660', '20230510124659134330', '20230510125212992230', '20230510070910657590', '20230510132927185640', '20230510161233218420', '20230510102119875910', '20230510142340713600', '20230510143937104750', '20230510052624769750', '20230510132804560250', '20230510145228893730', '20230510053650003850', '20230510132337274150', '20230510115028473830', '20230510143020385390', '20230510110832551250', '20230510093252108870', '20230510115904748320', '20230510115631844780', '20230510144202516280', '20230510140107459350', '20230510101223156770', '20230510101516241140', '20230510124242172310', '20230510133037818970', '20230510091800270120', '20230510124938261190', '20230510135202270260', '20230510153009082770', '20230510123951278350', '20230510163415761420', '20230510115442442690', '20230510123735326940', '20230510090846078470', '20230510160141721960', '20230510091939350700', '20230510092040329720', '20230510091450233240', '20230510091400760510', '20230510092134811400', '20230510144812691400', '20230510145141605410', '20230510160111623330', '20230510153118485280', '20230510163501890380', '20230510144131636310', '20230510092911301340', '20230510153239664880', '20230510144006008520', '20230510153155829690', '20230510153641814510', '20230510132149038460', '20230510133255114890', '20230510161128400340', '20230510153333532260', '20230510091710904670', '20230510144636291270', '20230510154356808690', '20230510090418348670', '20230510152757837800', '20230510154055364380', '20230510152835908410', '20230510091137790150', '20230510085626946650', '20230510160208278880', '20230510163425576450', '20230510131957915550', '20230510160312228430', '20230510160044781590', '20230510091320140550', '20230510161313032660', '20230510131520292940', '20230510135255919320', '20230510092313066190', '20230510160236545350', '20230510153412118840', '20230510023712887460', '20230510153044817660', '20230510160018114390', '20230510143837129500', '20230510132125197410', '20230510163635534460', '20230510160717762510', '20230510143517228800', '20230510085254877610', '20230510131846990370', '20230510152546561340', '20230510152612277110', '20230510092547382710', '20230510132022367730', '20230510135721318580', '20230510145042614640', '20230510131533603300', '20230510153419052890', '20230510163818546870', '20230510144510944310', '20230510143906834570', '20230510090609889530', '20230510163549696750', '20230510091847609790', '20230510091616644460', '20230510132049939740', '20230510145306289200', '20230510163906773290', '20230510090937625330', '20230510143432901900', '20230510143636470950', '20230510143447647540', '20230510131924166520', '20230510163955113870', '20230510161032153350', '20230510152929675160', '20230510153536639950', '20230510153839479790', '20230510153750044660', '20230510085223941410', '20230510153938725520', '20230510085527845620', '20230510155950355510', '20230510085340497420', '20230510085422075700', '20230510143605817570', '20230510085455687600', '20230510144049041830', '20230510161437818550', '20230510143541722870', '20230510143757347110', '20230510091032678400', '20230510090719588150', '20230510143714296370', '20230510161158421870', '20230510091537543410', '20230510093011238830', '20230510152718816110', '20230510085136028560', '20230510090521203530', '20230510091233077450']
b = ['20230510163425576450', '20230510143447647540', '20230510091710904670', '20230510144636291270', '20230510085254877610', '20230510145306289200', '20230510152546561340', '20230510152929675160', '20230510153044817660', '20230510161233218420', '20230510143636470950', '20230510163635534460', '20230510145141605410', '20230510091616644460', '20230510093252108870', '20230510143605817570', '20230510154356808690', '20230510163906773290', '20230510132022367730', '20230510140107459350', '20230510143837129500', '20230510085527845620', '20230510153419052890', '20230510090937625330', '20230510132049939740', '20230510163501890380', '20230510143432901900', '20230510153641814510', '20230510085422075700', '20230510090846078470', '20230510092547382710', '20230510160141721960', '20230510144131636310', '20230510152718816110', '20230510160717762510', '20230510085626946650', '20230510090418348670', '20230510131846990370', '20230510152835908410', '20230510153412118840', '20230510090521203530', '20230510161032153350', '20230510163549696750', '20230510144006008520', '20230510091400760510', '20230510143517228800', '20230510161313032660', '20230510153155829690', '20230510131520292940', '20230510091032678400', '20230510144850715760', '20230510160312228430', '20230510091939350700', '20230510131533603300', '20230510091537543410', '20230510091800270120', '20230510153750044660', '20230510153333532260', '20230510143714296370', '20230510132149038460', '20230510144049041830', '20230510091847609790', '20230510132125197410', '20230510154055364380', '20230510091137790150', '20230510145228893730', '20230510085455687600', '20230510091450233240', '20230510160236545350', '20230510160044781590', '20230510133255114890', '20230510161128400340', '20230510135202270260', '20230510155950355510', '20230510163415761420', '20230510153009082770', '20230510090719588150', '20230510085223941410', '20230510093011238830', '20230510160111623330', '20230510091233077450', '20230510092040329720', '20230510143541722870', '20230510153839479790', '20230510153239664880', '20230510160018114390', '20230510163818546870', '20230510135721318580', '20230510090609889530', '20230510143906834570', '20230510153938725520', '20230510092313066190', '20230510143757347110', '20230510131957915550', '20230510143937104750', '20230510153536639950', '20230510085340497420', '20230510153118485280', '20230510131924166520', '20230510092134811400', '20230510092911301340', '20230510152612277110', '20230510161158421870', '20230510091320140550', '20230510085136028560', '20230510161437818550', '20230510135255919320', '20230510144724137660', '20230510144812691400', '20230510144510944310', '20230510101729016550', '20230510100633467240', '20230510105559153810', '20230510104811406660', '20230511044338883870', '20230511025525924400', '20230510133037818970', '20230511101011950820', '20230510163955113870', '20230510145042614640', '20230510115028473830', '20230510053650003850', '20230510082450208700', '20230510102432769220', '20230510102722134380', '20230511043108521820', '20230510101516241140', '20230511043711704590', '20230510115631844780', '20230510110832551250', '20230510023712887460', '20230510132337274150', '20230510132927185640', '20230510102119875910', '20230510124242172310', '20230510115442442690', '20230510143020385390', '20230510101005013490', '20230510101223156770', '20230511023542662760', '20230510124444182840', '20230510115904748320', '20230510110351250460', '20230510125212992230', '20230511043305154230', '20230510142340713600', '20230510052624769750', '20230510124938261190', '20230510144202516280', '20230511094925388760', '20230510123951278350', '20230511100526789190', '20230510123735326940', '20230510135418634180', '20230510093433871400', '20230510070910657590', '20230510105806545920', '20230511042515747610', '20230511023109320920', '20230510110131168890', '20230510110525807350', '20230510100831723480', '20230510132804560250', '20230510124659134330', '20230510144131636310', '20230510144850715760']
print(sorted(a))
print(sorted(b))
print()

for bb in b:
    if bb not in a:
        print("scanned 里有 T86 没\n" + str(bb) + "  " +  str(b.index(bb)))


for aa in a:
    if aa not in b:
        print("scanned 里没 T86 有\n" + str(aa))





import openpyxl
from openpyxl.utils import get_column_letter

# Load the Excel file
workbook = openpyxl.load_workbook('your_file.xlsx')

# Select the desired sheet
sheet = workbook['Sheet1']  # Replace 'Sheet1' with the actual sheet name

# Define the desired column headers to be styled in red
red_columns = ["Tracking Number", "MAWB", "Courier code", "Action", "DSP"]

# Iterate over the columns and update the header style
for col_num, col_letter in enumerate(sheet.iter_cols(min_row=1, max_row=1), 1):
    column_header = sheet[get_column_letter(col_num) + '1'].value
    if column_header in red_columns:
        # Set the font color to red
        col_letter[0].font = openpyxl.styles.Font(color="FF0000")

# Save the modified workbook
workbook.save('your_modified_file.xlsx')


'''
sheet.iter_cols:

    Let's break down the sheet.iter_cols(min_row=1, max_row=1), 1 expression:
    
    sheet.iter_cols(min_row=1, max_row=1): This part iterates over the columns in the worksheet defined by the sheet variable. It specifies a range of rows to iterate over, in this case, from min_row=1 to max_row=1. Since we are only interested in the first row (which contains the column headers), we set both min_row and max_row to 1.
    
    , 1: This part represents the optional col_offset parameter for iter_cols(). It specifies the column offset, indicating the starting column index. In this case, 1 is passed as the col_offset, which means the iteration starts from the first column.
    
    Combining these parts together, sheet.iter_cols(min_row=1, max_row=1), 1 iterates over the columns in the first row of the worksheet, starting from the first column.
    
    By using this iteration, we can access each column object in the first row and check its corresponding column header value.
    

get_column_letter(col_num) + '1':

    get_column_letter(col_num) is a function provided by the openpyxl library that converts a column number to its corresponding letter representation in Excel. For example, get_column_letter(1) returns 'A', get_column_letter(2) returns 'B', and so on.
    
    In the context of get_column_letter(col_num) + '1', it is used to generate a cell reference for a specific column and row in Excel. The col_num represents the column number, and get_column_letter(col_num) converts it to the corresponding letter. By concatenating the letter with the number 1, we get the cell reference for the first row of the specified column. For example, if col_num is 1, the expression get_column_letter(1) + '1' evaluates to 'A1', representing the cell in the first row and first column of an Excel worksheet.



'''